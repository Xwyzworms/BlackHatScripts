from multiprocessing import Semaphore
import optparse
import socket
from socket import *
from threading import Thread


screenLock = Semaphore(value=1)
def connectScan(tgtHost, tgtPort):
    try:

        connectSocket = socket(AF_INET, SOCK_STREAM)
        connectSocket.connect((tgtHost, int(tgtPort)))
        ## Try to send the data, to check wheteher the application running on the target host and port !
        connectSocket.send("Here i'am ! ")
        ## Get the response, with 100 Buffer bytes
        results = connectSocket.recv(100)
        screenLock.acquire()
        print(f"Scanning Port {tgtPort} ")
        print(f"[+] TCP Open {tgtPort}")
        print(f"[+] {str(results)}")

    except:
        screenLock.acquire()
        print(f"Scanning Port {tgtPort} ")
        print(f"[-] TCP Closed {tgtPort}")
    finally:
        connectSocket.close()
        screenLock.release()


def scanPort(tgtHost, tgtPorts):
    
    try:
        targetIP = gethostbyname(tgtHost)
    except:
        print(f"[-] Cannot Resolve {tgtHost} Unknown Host")

    try:
        targetName = gethostbyaddr(targetIP)
        print(f"[+] Scan Results for :  {targetName[0]}")
    except:
        print(f"[+] Scan Results for {targetIP}")

    setdefaulttimeout(1)
    for targetPort in tgtPorts:
        t = Thread(target=connectScan, args=(tgtHost, int(targetPort)))
        t.start()

def main():
    parser = optparse.OptionParser("usage %prog -H <target host> -p <target port>")

    parser.add_option("-H", dest="tgtHost", type="string", help="Specify Target Host")
    parser.add_option("-p", dest="tgtPorts", type="string", help="Specify Target Port")

    (options, args) = parser.parse_args()

    tgtHost = options.tgtHost
    tgtPorts = options.tgtPorts.split(",")

    if(tgtHost == None) | (tgtPorts[0] == None) :
        print(parser.usage)
        exit(0)
    scanPort(tgtHost, tgtPorts)

if __name__ == "__main__":
    main()